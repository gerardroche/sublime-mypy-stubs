# flake8: noqa

from typing import Any
from typing import Callable
from typing import Dict
from typing import List
from typing import Optional
from typing import Tuple
from typing import Union

from sublime import DictValueType
from sublime import Edit
from sublime import PointType
from sublime import Settings
from sublime import View
from sublime import Window

all_callbacks = ...  # type: Any
all_command_classes = ...  # type: Any
api_ready = ...  # type: bool
application_command_classes = ...  # type: Any
profile = ...  # type: Any
text_command_classes = ...  # type: Any
view_event_listener_classes = ...  # type: Any
view_event_listeners = ...  # type: Any
window_command_classes = ...  # type: Any

def attach_view(view: View) -> None: ...
def check_view_event_listeners(view: View) -> None: ...
def create_application_commands() -> None: ...
def create_text_commands(view_id: int) -> List[TextCommand]: ...
def create_view_event_listeners(classes: List[str], view: View) -> None: ...
def create_window_commands(window_id: int) -> List[WindowCommand]: ...
def is_view_event_listener_applicable(cls: object, view: View) -> bool: ...
def on_api_ready() -> None: ...
def reload_plugin(modulename: str) -> None: ...
def unload_module(module: Any) -> None: ...
def unload_plugin(modulename: str) -> None: ...

check_all_view_event_listeners_scheduled = ...  # type: bool

def check_all_view_event_listeners() -> None: ...
def detach_view(view: View) -> None: ...
def event_listeners_for_view(view: View) -> List[int]: ...
def find_view_event_listener(view: View, cls: object) -> Optional[View]: ...

class Summary:

    count = ...  # type: int
    max = ...  # type: float
    sum = ...  # type: float

    def __init__(self) -> None: ...
    def record(self, x: int) -> None: ...

def normalise_completion(c: str) -> Union[str, Tuple[str, str, str]]: ...
def on_activated(view_id: int) -> None: ...
def on_activated_async(view_id: int) -> None: ...
def on_clone(view_id: int) -> None: ...
def on_clone_async(view_id: int) -> None: ...
def on_close(view_id: int) -> None: ...
def on_deactivated(view_id: int) -> None: ...
def on_deactivated_async(view_id: int) -> None: ...
def on_hover(view_id: int, point: int, hover_zone: int) -> None: ...
def on_load(view_id: int) -> None: ...
def on_load_async(view_id: int) -> None: ...
def on_modified(view_id: int) -> None: ...
def on_modified_async(view_id: int) -> None: ...
def on_new(view_id: int) -> None: ...
def on_new_async(view_id: int) -> None: ...
def on_post_save(view_id: int) -> None: ...
def on_post_save_async(view_id: int) -> None: ...
def on_post_text_command(view_id: int, name: str, args: Optional[Dict[str, Any]]) -> None: ...
def on_post_window_command(window_id: int, name: str, args: Optional[Dict[str, Any]]) -> None: ...
def on_pre_close(view_id: int) -> None: ...
def on_pre_save(view_id: int) -> None: ...
def on_pre_save_async(view_id: int) -> None: ...
def on_query_completions(view_id: int, prefix: str, locations: List[PointType]) -> Optional[List[Tuple[str, str]]]: ...
def on_query_context(view_id: int, key: str, operator: int, operand: bool, match_all: bool) -> Optional[bool]: ...
def on_selection_modified(view_id: int) -> None: ...
def on_selection_modified_async(view_id: int) -> None: ...
def on_text_command(view_id: int, name: str, args: Optional[Dict[str, Any]]) -> None: ...
def on_window_command(window_id: int, name: str, args: Optional[Dict[str, Any]]) -> None: ...
def run_async_view_listener_callback(view: View, name: str) -> None: ...
def run_callback(event: str, callback: Callable[[], None], expr: Callable[[], None]) -> None: ...
def run_view_listener_callback(view: View, name: str) -> None: ...

class Command:

    def description(self) -> str: ...
    def description_(self, args: Optional[Dict[str, Any]]) -> str: ...
    def filter_args(self, args: Optional[Dict[str, Any]]) -> DictValueType: ...
    def is_checked(self) -> bool: ...
    def is_checked_(self, args: Optional[Dict[str, Any]]) -> bool: ...
    def is_enabled(self) -> bool: ...
    def is_enabled_(self, args: Optional[Dict[str, Any]]) -> bool: ...
    def is_visible(self) -> bool: ...
    def is_visible_(self, args: Optional[Dict[str, Any]]) -> bool: ...
    def name(self) -> str: ...
    def want_event(self) -> bool: ...

class ApplicationCommand(Command):

    def run(self) -> None: ...
    def run_(self, edit_token: int, args: Optional[Dict[str, Any]]) -> None: ...

class WindowCommand(Command):

    window = ...  # type: Any

    def __init__(self, window: Window) -> None: ...
    def run(self) -> None: ...
    def run_(self, edit_token: int, args: Optional[Dict[str, Any]]) -> None: ...

class TextCommand(Command):

    view = ...  # type: Any

    def __init__(self, view: View) -> None: ...
    def run(self, edit: Edit) -> None: ...
    def run_(self, edit_token: int, args: Optional[Dict[str, Any]]) -> None: ...

class EventListener:

    def on_activated(self, view: View) -> None: ...
    def on_activated_async(self, view: View) -> None: ...
    def on_clone(self, view: View) -> None: ...
    def on_clone_async(self, view: View) -> None: ...
    def on_close(self, view: View) -> None: ...
    def on_deactivated(self, view: View) -> None: ...
    def on_deactivated_async(self, view: View) -> None: ...
    def on_hover(self, view: View, point: PointType, hover_zone: int) -> None: ...
    def on_load(self, view: View) -> None: ...
    def on_load_async(self, view: View) -> None: ...
    def on_modified(self, view: View) -> None: ...
    def on_modified_async(self, view: View) -> None: ...
    def on_new(self, view: View) -> None: ...
    def on_new_async(self, view: View) -> None: ...
    def on_post_save(self, view: View) -> None: ...
    def on_post_save_async(self, view: View) -> None: ...
    def on_post_text_command(self, view_id: int, name: str, args: DictValueType) -> None: ...
    def on_post_window_command(self, window_id: int, name: str, args: DictValueType) -> None: ...
    def on_pre_close(self, view: View) -> None: ...
    def on_pre_save(self, view: View) -> None: ...
    def on_pre_save_async(self, view: View) -> None: ...
    def on_query_completions(self, view: View, prefix: str, locations: List[PointType]) -> Optional[List[Tuple[str, str]]]: ...
    def on_query_context(self, view: View, key: str, operator: int, operand: int, match_all: bool) -> Optional[bool]: ...
    def on_selection_modified(self, view: View) -> None: ...
    def on_selection_modified_async(self, view: View) -> None: ...
    def on_text_command(self, view: View, name: str, args: DictValueType) -> Optional[Tuple[str, DictValueType]]: ...
    def on_window_command(self, window: Window, name: str, args: DictValueType) -> Optional[Tuple[str, DictValueType]]: ...

class ViewEventListener:

    @classmethod
    def is_applicable(cls: object, settings: Settings) -> bool: ...

    @classmethod
    def applies_to_primary_view_only(cls: object) -> bool: ...

    view = ...  # type: Any

    def __init__(self, view: View) -> None: ...

class MultizipImporter:

    file_loaders = ...  # type: Any
    loaders = ...  # type: Any

    def __init__(self) -> None: ...
    def find_module(self, fullname: str, path: Optional[Any] = ...) -> str: ...

class ZipLoader:

    name = ...  # type: Any
    zippath = ...  # type: Any

    def __init__(self, zippath: str) -> None: ...
    def has(self, fullname: str) -> bool: ...
    def load_module(self, fullname: str) -> None: ...

multi_importer = ...  # type: Any
override_path = ...  # type: Any

def set_override_path(path: str) -> None: ...
def update_compressed_packages(pkgs: List[str]) -> None: ...
