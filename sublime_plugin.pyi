# flake8: noqa
# Stubs for sublime_plugin (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Callable, Dict, List, Optional, Tuple, Union
import sublime

api_ready = ...  # type: bool
application_command_classes = ...  # type: Any
window_command_classes = ...  # type: Any
text_command_classes = ...  # type: Any
view_event_listener_classes = ...  # type: Any
view_event_listeners = ...  # type: Any
all_command_classes = ...  # type: Any
all_callbacks = ...  # type: Any
profile = ...  # type: Any

def unload_module(module: Any) -> None: ...
def unload_plugin(modulename: str) -> None: ...
def reload_plugin(modulename: str) -> None: ...
def create_application_commands() -> None: ...
def create_window_commands(window_id: int) -> List[WindowCommand]: ...
def create_text_commands(view_id: int) -> List[TextCommand]: ...
def on_api_ready() -> None: ...
def is_view_event_listener_applicable(cls: object, view: sublime.View) -> bool: ...
def create_view_event_listeners(classes: list, view: sublime.View) -> None: ...
def check_view_event_listeners(view: sublime.View) -> None: ...
def attach_view(view: sublime.View) -> None: ...

check_all_view_event_listeners_scheduled = ...  # type: bool

def check_all_view_event_listeners() -> None: ...
def detach_view(view: sublime.View) -> None: ...
def event_listeners_for_view(view: sublime.View) -> List[int]: ...
def find_view_event_listener(view: sublime.View, cls: object) -> Optional[sublime.View]: ...
def on_new(view_id: int) -> None: ...
def on_new_async(view_id: int) -> None: ...
def on_clone(view_id: int) -> None: ...
def on_clone_async(view_id: int) -> None: ...

class Summary:
    max = ...  # type: float
    sum = ...  # type: float
    count = ...  # type: int
    def __init__(self) -> None: ...
    def record(self, x: int) -> None: ...

def run_callback(event: str, callback: Callable, expr: Callable) -> None: ...
def run_view_listener_callback(view: sublime.View, name: str) -> None: ...
def run_async_view_listener_callback(view: sublime.View, name: str) -> None: ...
def on_load(view_id: int) -> None: ...
def on_load_async(view_id: int) -> None: ...
def on_pre_close(view_id: int) -> None: ...
def on_close(view_id: int) -> None: ...
def on_pre_save(view_id: int) -> None: ...
def on_pre_save_async(view_id: int) -> None: ...
def on_post_save(view_id: int) -> None: ...
def on_post_save_async(view_id: int) -> None: ...
def on_modified(view_id: int) -> None: ...
def on_modified_async(view_id: int) -> None: ...
def on_selection_modified(view_id: int) -> None: ...
def on_selection_modified_async(view_id: int) -> None: ...
def on_activated(view_id: int) -> None: ...
def on_activated_async(view_id: int) -> None: ...
def on_deactivated(view_id: int) -> None: ...
def on_deactivated_async(view_id: int) -> None: ...
def on_query_context(view_id: int, key: str, operator: int, operand: bool, match_all: bool) -> Optional[bool]: ...
def normalise_completion(c: str) -> Union[str, Tuple[str, str, str]]: ...
def on_query_completions(view_id: int, prefix: str, locations: list) -> None: ...
def on_hover(view_id: int, point: int, hover_zone: int) -> None: ...
def on_text_command(view_id: int, name: str, args: Optional[Dict[str, Any]]) -> None: ...
def on_window_command(window_id: int, name: str, args: Optional[Dict[str, Any]]) -> None: ...
def on_post_text_command(view_id: int, name: str, args: Optional[Dict[str, Any]]) -> None: ...
def on_post_window_command(window_id: int, name: str, args: Optional[Dict[str, Any]]) -> None: ...

class Command:
    def name(self) -> str: ...
    def is_enabled_(self, args: Optional[Dict[str, Any]]) -> bool: ...
    def is_enabled(self) -> bool: ...
    def is_visible_(self, args: Optional[Dict[str, Any]]) -> bool: ...
    def is_visible(self) -> bool: ...
    def is_checked_(self, args: Optional[Dict[str, Any]]) -> bool: ...
    def is_checked(self) -> bool: ...
    def description_(self, args: Optional[Dict[str, Any]]) -> str: ...
    def description(self) -> str: ...
    def filter_args(self, args: Optional[Dict[str, Any]]) -> dict: ...
    def want_event(self) -> bool: ...

class ApplicationCommand(Command):
    def run_(self, edit_token: int, args: Optional[Dict[str, Any]]) -> None: ...
    def run(self) -> None: ...

class WindowCommand(Command):
    window = ...  # type: Any
    def __init__(self, window: sublime.Window) -> None: ...
    def run_(self, edit_token: int, args: Optional[Dict[str, Any]]) -> None: ...
    def run(self) -> None: ...

class TextCommand(Command):
    view = ...  # type: Any
    def __init__(self, view: sublime.View) -> None: ...
    def run_(self, edit_token: int, args: Optional[Dict[str, Any]]) -> None: ...
    def run(self, edit: sublime.Edit) -> None: ...

class EventListener: ...

class ViewEventListener:
    @classmethod
    def is_applicable(cls: object, settings: sublime.Settings) -> bool: ...
    @classmethod
    def applies_to_primary_view_only(cls: object) -> bool: ...
    view = ...  # type: Any
    def __init__(self, view: sublime.View) -> None: ...

class MultizipImporter:
    loaders = ...  # type: Any
    file_loaders = ...  # type: Any
    def __init__(self) -> None: ...
    def find_module(self, fullname: str, path: Optional[Any] = ...) -> str: ...

class ZipLoader:
    zippath = ...  # type: Any
    name = ...  # type: Any
    def __init__(self, zippath: str) -> None: ...
    def has(self, fullname: str) -> bool: ...
    def load_module(self, fullname: str) -> None: ...

override_path = ...  # type: Any
multi_importer = ...  # type: Any

def update_compressed_packages(pkgs: list) -> None: ...
def set_override_path(path: str) -> None: ...
